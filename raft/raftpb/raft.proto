syntax = "proto2";
package raftpb;

import "gogoproto/gogo.proto";

option (gogoproto.marshaler_all) = true;
option (gogoproto.sizer_all) = true;
option (gogoproto.unmarshaler_all) = true;
option (gogoproto.goproto_getters_all) = false;
option (gogoproto.goproto_enum_prefix_all) = false;

// 硬件状态：任期、投票、提交
message HardState {
	optional uint64 term   = 1 [(gogoproto.nullable) = false];
	optional uint64 vote   = 2 [(gogoproto.nullable) = false];
	optional uint64 commit = 3 [(gogoproto.nullable) = false];
}

// 实体类型
enum EntryType {
	EntryNormal     = 0;

	EntryConfChange = 1;
}

// 实体：任期、序号、类型、数据
message Entry {
	optional uint64     Term  = 2 [(gogoproto.nullable) = false]; // must be 64-bit aligned for atomic operations
	optional uint64     Index = 3 [(gogoproto.nullable) = false]; // must be 64-bit aligned for atomic operations
	optional EntryType  Type  = 1 [(gogoproto.nullable) = false];
	optional bytes      Data  = 4;
}

// 配置状态
message ConfState {
	repeated uint64 nodes    = 1; // 节点列表
	repeated uint64 learners = 2; // 学习者列表
}

// 元信息：节点信息、任期、序号
message SnapshotMetadata {
	optional ConfState conf_state = 1 [(gogoproto.nullable) = false];
	optional uint64    index      = 2 [(gogoproto.nullable) = false];
	optional uint64    term       = 3 [(gogoproto.nullable) = false];
}

// 快照：数据、元信息
message Snapshot {
	optional bytes            data     = 1;
	optional SnapshotMetadata metadata = 2 [(gogoproto.nullable) = false];
}

// 信息类型
enum MessageType {
	MsgHup             = 0;     // 用于选举
	MsgBeat            = 1;     // 领导者发心跳给追随者。
	MsgProp            = 2;     // 提议消息表示追加消息到日志实体。
	MsgApp             = 3;     // 复制日志
	MsgAppResp         = 4;     // 复制日志响应
	MsgVote            = 5;     // 选举投票
	MsgVoteResp        = 6;     // 选举投票响应
	MsgSnap            = 7;     // 安装快照
	MsgHeartbeat       = 8;     // 
	MsgHeartbeatResp   = 9;     // 
	MsgUnreachable     = 10;    // 不可到达，需要重新探测
	MsgSnapStatus      = 11;    // 安装快照结果
	MsgCheckQuorum     = 12;    // 校验配额
	MsgTransferLeader  = 13;    // 转交leader
	MsgTimeoutNow      = 14;    // 超时
	MsgReadIndex       = 15;    // 
	MsgReadIndexResp   = 16;
	MsgPreVote         = 17;    // 预投票，两阶段选举协议。
	MsgPreVoteResp     = 18;    // 预投票响应
}
// 信息
message Message {
	optional MessageType type        = 1  [(gogoproto.nullable) = false];
	optional uint64      to          = 2  [(gogoproto.nullable) = false];
	optional uint64      from        = 3  [(gogoproto.nullable) = false];
	optional uint64      term        = 4  [(gogoproto.nullable) = false];
	optional uint64      logTerm     = 5  [(gogoproto.nullable) = false];
	optional uint64      index       = 6  [(gogoproto.nullable) = false];
	repeated Entry       entries     = 7  [(gogoproto.nullable) = false];
	optional uint64      commit      = 8  [(gogoproto.nullable) = false];
	optional Snapshot    snapshot    = 9  [(gogoproto.nullable) = false];
	optional bool        reject      = 10 [(gogoproto.nullable) = false];
	optional uint64      rejectHint  = 11 [(gogoproto.nullable) = false];
	optional bytes       context     = 12;
}

// 配置变更类型
enum ConfChangeType {
	ConfChangeAddNode        = 0; // 增加节点
	ConfChangeRemoveNode     = 1; // 删除节点
	ConfChangeUpdateNode     = 2; // 更新节点
	ConfChangeAddLearnerNode = 3; // 增加学习者
}

// 配置变更：id、类型、节点、上下文
message ConfChange {
	optional uint64          ID      = 1 [(gogoproto.nullable) = false];
	optional ConfChangeType  Type    = 2 [(gogoproto.nullable) = false];
	optional uint64          NodeID  = 3 [(gogoproto.nullable) = false];
	optional bytes           Context = 4;
}
